cmake_minimum_required(VERSION 2.8)
project(pxscene)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})


set(PXCOREDIR ${CMAKE_CURRENT_SOURCE_DIR}/../../..)
set(EXTDIR "${CMAKE_CURRENT_SOURCE_DIR}/../external")
set(NODEDIR "${EXTDIR}/libnode-v6.9.0/")
set(NODEINC "${NODEDIR}/src ${NODEDIR}/deps/uv/include ${NODEDIR}/deps/v8 ${NODEDIR}/deps/debugger-agent/include ${NODEDIR}/deps/v8/include ${NODEDIR}/deps/cares/include")
set(ZLIBINC "${EXTDIR}/zlib/")
set(CURLINC "${EXTDIR}/curl/include")
set(JPGINC "${EXTDIR}/jpg")
set(JPGTURBOINC "${EXTDIR}/libjpeg-turbo")
set(PNGINC "${EXTDIR}/png")
set(FREETYPEINC "${EXTDIR}/ft/include")
set(WESTEROSINC ${EXTDIR}/westeros/external/install/include)
set(WESTEROSSTUBINC ${EXTDIR}/westeros-stub)
set(JPEGTURBOINC ${EXTDIR}/libjpeg-turbo)
set(BREAKPADINC ${EXTDIR}/breakpad/src)
set(RTREMOTEINC ${PXCOREDIR}/remote)

set(PX_LIBRARY_SUPPORT 1)
set(PXWAYLAND_LIBRARY_SUPPORT 0)
set(PX_LIBRARY_LINK_PXCORE 1)

option(BUILD_WITH_GL "BUILD_WITH_GL" ON)
option(BUILD_WITH_WAYLAND "BUILD_WITH_WAYLAND" OFF)
option(BUILD_WITH_WESTEROS "BUILD_WITH_WESTEROS" OFF)
option(BUILD_WITH_CXX_11 "BUILD_WITH_CXX_11" ON)
option(BUILD_WITH_TEXTURE_USAGE_MONITORING "BUILD_WITH_TEXTURE_USAGE_MONITORING" OFF)
option(BUILD_WITH_WINDOWLESS_EGL "BUILD_WITH_WINDOWLESS_EGL" OFF)
option(BUILD_WITH_WINDOWLESS_DFB "BUILD_WITH_WINDOWLESS_DFB" OFF)

if (APPLE)
        message ("building pxscene for mac")
        set(PX_PLATFORM PX_PLATFORM_MAC)
        set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/mac)
        set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
        add_definitions(-DENABLE_NODE_V_6_9 -D_DARWIN_USE_64_BIT_INODE=1 -DNODE_ARCH="x64" -DNODE_WANT_INTERNALS=1 -DV8_DEPRECATION_WARNINGS= -DNODE_SHARED_MODE -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1 -DHAVE_INSPECTOR=1 -DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1 -DHAVE_OPENSSL=1 -DHAVE_DTRACE=1 -D__POSIX__ -DNODE_PLATFORM=darwin -DUCONFIG_NO_TRANSLITERATION=1 -DUCONFIG_NO_SERVICE=1 -DUCONFIG_NO_REGULAR_EXPRESSIONS=1 -DU_ENABLE_DYLOAD=0 -DU_STATIC_IMPLEMENTATION=1 -DU_HAVE_STD_STRING=0 -DUCONFIG_NO_BREAK_ITERATION=0 -DUCONFIG_NO_LEGACY_CONVERSION=1 -DUCONFIG_NO_CONVERSION=1 -DHTTP_PARSER_STRICT=0 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64)
        add_definitions(-DENABLE_DEBUG_MODE -DPNG_APNG_SUPPORTED)
        set(PLATFORM_SOURCES mac/pxContextUtils.mm)
        set(PXSCENE_LINKER_OPTIONS "-framework OpenGL -framework Cocoa -framework Foundation")
        set(PXSCENE_LINK_LIBRARIES )
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/png/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/jpg/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/ft/objs/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/curl/lib/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/zlib)
        set(PLATFORM_LIBRARIES node pxCore rtCore_s pthread v8_libplatform png16 jpeg freetype curl z)
        include_directories(AFTER ${ZLIBINC} ${CURLINC} ${JPGINC} ${JPGTURBOINC} ${PNGINC} ${FREETYPEINC})
        if (DEFINED ENV{CODE_COVERAGE})
                message("enabling code coverage support")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
                add_definitions(-DENABLE_CODE_COVERAGE)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/8.0.0/lib/darwin)
                set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} clang_rt.profile_osx)
        endif()
        add_custom_target(pxsceneDone ALL DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/pxscene)
        add_custom_command(TARGET pxsceneDone COMMENT "making app bundle" POST_BUILD COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/mkapp.sh WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
        set(PX_LIBRARY_SUPPORT 0)
elseif (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
        execute_process(COMMAND "hostname" OUTPUT_VARIABLE HOSTNAME)
        string(STRIP ${HOSTNAME} HOSTNAME)
        if (HOSTNAME STREQUAL "raspberrypi")
                message("building pxscene for raspberrypi")
                set(PX_PLATFORM PX_PLATFORM_GENERIC_EGL)
                set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/egl)
                set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
                set(PLATFORM_SOURCES egl/pxContextUtils.cpp)
                add_definitions(-DPXSCENE_DISABLE_PXCONTEXT_EXT)
                add_definitions(-DENABLE_DEBUG_MODE -DPNG_APNG_SUPPORTED)
                include_directories(AFTER /opt/vc/include /opt/vc/include/interface/vcos/pthreads
                        /opt/vc/include/interface/vmcs_host/linux /opt/vc/include)
                include_directories(AFTER ${ZLIBINC} ${CURLINC} ${JPGINC} ${JPGTURBOINC} ${PNGINC} ${FREETYPEINC})
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} /opt/vc/lib/)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/png/.libs)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/jpg/.libs)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/ft/objs/.libs)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/curl/lib/.libs)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/zlib)
                set(PLATFORM_LIBRARIES bcm_host EGL GLESv2  dl rt png16 node pxCore rtCore_s pthread v8_libplatform jpeg freetype curl z)
        elseif (BUILD_WITH_WINDOWLESS_EGL)
                message("building pxscene for windowless EGL")
                set(PX_PLATFORM PX_PLATFORM_GENERIC_EGL)
                set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/egl)
                set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
                set(PLATFORM_SOURCES egl/pxContextUtils.cpp)
                set(PLATFORM_LIBRARIES nexus nxclient)
                set(PXCORE_STAGING_LIST $ENV{PXCORE_STAGING})
                separate_arguments(PXCORE_STAGING_LIST)
                include_directories(AFTER ${PXCORE_STAGING_LIST})
                add_definitions(-DPX_NO_WINDOW -DENABLE_V8_HEAP_PARAMS -DENABLE_MAX_TEXTURE_SIZE -DBSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE)
                if(DEFINED ENV{PXSCENE_DISABLE_APNG_SUPPORT})
                        message("Not including APNG support for pxscene")
                else()
                        message("Including APNG support for pxscene")
                        add_definitions(-DPNG_APNG_SUPPORTED)
                endif(DEFINED ENV{PXSCENE_DISABLE_APNG_SUPPORT})
                set(PXWAYLAND_LIBRARY_SUPPORT 1)
        elseif (BUILD_WITH_WINDOWLESS_DFB)
                message("building pxscene for windowless DFB")
                set(PX_PLATFORM PX_PLATFORM_GENERIC_DFB)
                set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/dfb)
                set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
                set(PLATFORM_LIBRARIES png15 directfb direct fusion)
                add_definitions(-DPX_NO_WINDOW)
        else()
                message ("building pxscene for glut")
                set(PX_PLATFORM PX_PLATFORM_GLUT)
                set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/glut)
                set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
                set(PLATFORM_SOURCES glut/pxContextUtils.cpp)
                add_definitions(-DENABLE_LIBJPEG_TURBO -DHAS_LINUX_BREAKPAD)
                add_definitions(-DENABLE_DEBUG_MODE -DPNG_APNG_SUPPORTED)
                include_directories(AFTER ${ZLIBINC} ${CURLINC} ${JPGINC} ${JPGTURBOINC} ${PNGINC} ${GLUTINC} ${FREETYPEINC})
                set(PLATFORM_LIBRARIES node pxCore rtCore_s pthread v8_libplatform png16 X11 glut GLEW GL dl rt turbojpeg breakpad_client jpeg freetype curl z)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/png/.libs)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/jpg/.libs)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/ft/objs/.libs)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/curl/lib/.libs)
                set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/zlib)
                set(PX_LIBRARY_LINK_PXCORE 0)
        endif(HOSTNAME STREQUAL "raspberrypi")
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/libjpeg-turbo/.libs)
        add_definitions(-DENABLE_NODE_V_6_9 -DNODE_PLATFORM="linux" -DNODE_WANT_INTERNALS=1 -DV8_DEPRECATION_WARNINGS=1 -DNODE_SHARED_MODE -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1 -DHAVE_INSPECTOR=1 -DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1)
        set(PXSCENE_LINKER_OPTIONS "")
        #set(PXSCENE_LINK_LIBRARIES pthread)
        if (DEFINED ENV{CODE_COVERAGE})
                message("enabling code coverage support")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
                add_definitions(-DENABLE_CODE_COVERAGE)
                set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} gcov)
        endif()
else (APPLE)
        message(FATAL_ERROR "Cannot build pxscene.  Unknown platform")
endif(APPLE)

set (TARGETINCLUDE "")
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${NODEDIR}/out/Release/obj.target ${NODEDIR}/out/Release ${NODEDIR}/out/Release/obj.target/deps/v8/tools/gyp)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/breakpad/src/client/linux)

set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} ${PLATFORM_LIBRARIES})

add_definitions(-DRT_PLATFORM_LINUX -D${PX_PLATFORM} -DENABLE_RT_NODE -DRUNINMAIN -DENABLE_HTTP_CACHE)

#todo add code coverage check
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
#set(PXSCENE_LINKER_OPTIONS "${PXSCENE_LINKER_OPTIONS} -lgcov")


include_directories(AFTER ${NODEDIR}/src ${NODEDIR}/deps/uv/include ${NODEDIR}/deps/v8 ${NODEDIR}/deps/debugger-agent/include ${NODEDIR}/deps/v8/include ${NODEDIR}/deps/cares/include)
include_directories(AFTER ${WESTEROSINC} ${WESTEROSSTUBINC} ${JPEGTURBOINC} ${BREAKPADINC} ${RTREMOTEINC} ${PXCOREDIR}/src)
include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR})

set(PXSCENE_COMMON_FILES pxScene2d.cpp pxResource.cpp  pxConstants.cpp  pxRectangle.cpp  pxFont.cpp  pxText.cpp
        pxTextBox.cpp pxImage.cpp pxImage9.cpp pxImageA.cpp pxArchive.cpp pxAnimate.cpp)

set(PXWAYLAND_LIB_FILES pxContextGL.cpp egl/pxContextUtils.cpp)

if (BUILD_WITH_GL)
        message("Building with GL support")
        set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} pxContextGL.cpp)
else()
        message("Building with DirectFB support")
        set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} pxContextDFB.cpp)
endif(BUILD_WITH_GL)

if (BUILD_WITH_WAYLAND)
        message("Building with wayland support")
        set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} pxWayland.cpp pxWaylandContainer.cpp)
        add_definitions(-DENABLE_PX_WAYLAND_RPC)
        set(PXWAYLAND_LIB_FILES ${PXWAYLAND_LIB_FILES} pxWayland.cpp)
else()
        message("Not building with wayland support")
        add_definitions(-DDISABLE_WAYLAND)
endif(BUILD_WITH_WAYLAND)

if (BUILD_WITH_WESTEROS)
        message("Building with Westeros support")
        set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} westeros_compositor)
else()
        message("Building with Westeros stubs")
        set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} ../external/westeros-stub/westeros-stub.cpp)
endif(BUILD_WITH_WESTEROS)

set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} ${PLATFORM_SOURCES})

set(PXSCENE_APP_FILES ${PXSCENE_COMMON_FILES} pxScene.cpp)
set(PXSCENE_LIB_FILES ${PXSCENE_COMMON_FILES})


set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra")

if (BUILD_WITH_CXX_11)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
endif(BUILD_WITH_CXX_11)

if (BUILD_WITH_TEXTURE_USAGE_MONITORING)
        add_definitions(-DENABLE_PX_SCENE_TEXTURE_USAGE_MONITORING)
endif(BUILD_WITH_TEXTURE_USAGE_MONITORING)

set(CMAKE_EXE_LINKER_FLAGS  ${CMAKE_EXE_LINKER_FLAGS} ${PXSCENE_LINKER_OPTIONS} )
link_directories(${PXSCENE_LINK_DIRECTORIES})
#link_libraries(${PXSCENE_LINK_LIBRARIES})



add_executable(pxscene_app ${PXSCENE_APP_FILES})
set_target_properties(pxscene_app PROPERTIES OUTPUT_NAME "pxscene")
target_link_libraries(pxscene_app ${PXSCENE_LINK_LIBRARIES})

if (PX_LIBRARY_SUPPORT GREATER 0)
        message("Enabling build support for libraries")
        if (PX_LIBRARY_LINK_PXCORE GREATER 0)
                set(LIBRARY_LINKER_OPTIONS -Wl,--whole-archive ${PXCORE_LIB_LOCATION}/libpxCore.a  -Wl,--no-whole-archive)
        endif(PX_LIBRARY_LINK_PXCORE GREATER 0)
        add_library(pxscene_static ${PXSCENE_LIB_FILES})
        set_target_properties(pxscene_static PROPERTIES OUTPUT_NAME "pxscene")
        target_link_libraries(pxscene_static ${LIBRARY_LINKER_OPTIONS} ${PXSCENE_LINK_LIBRARIES})

        add_library(pxscene_shared SHARED ${PXSCENE_LIB_FILES})
        set_target_properties(pxscene_shared PROPERTIES OUTPUT_NAME "pxscene")
        target_link_libraries(pxscene_shared ${LIBRARY_LINKER_OPTIONS} ${PXSCENE_LINK_LIBRARIES})
        if (PXWAYLAND_LIBRARY_SUPPORT GREATER 0)
                message("Enabling build support for pxWayland libraries")
                add_library(pxwayland_static ${PXWAYLAND_LIB_FILES})
                set_target_properties(pxwayland_static PROPERTIES OUTPUT_NAME "pxwayland_s")

                add_library(pxwayland_shared SHARED ${PXWAYLAND_LIB_FILES})
                set_target_properties(pxwayland_shared PROPERTIES OUTPUT_NAME "pxwayland")
                target_link_libraries(pxwayland_shared ${LIBRARY_LINKER_OPTIONS} ${PXSCENE_LINK_LIBRARIES})
        endif(PXWAYLAND_LIBRARY_SUPPORT GREATER 0)
else()
        message("Disabling build support for libraries")
endif(PX_LIBRARY_SUPPORT GREATER 0)

