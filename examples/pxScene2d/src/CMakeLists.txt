cmake_minimum_required(VERSION 2.8)
project(pxscene)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})


set(PXCOREDIR ${CMAKE_CURRENT_SOURCE_DIR}/../../..)
set(EXTDIR "${CMAKE_CURRENT_SOURCE_DIR}/../external")
set(NODEDIR "${EXTDIR}/libnode-v6.9.0/")
set(NODEINC "${NODEDIR}/src ${NODEDIR}/deps/uv/include ${NODEDIR}/deps/v8 ${NODEDIR}/deps/debugger-agent/include ${NODEDIR}/deps/v8/include ${NODEDIR}/deps/cares/include")
set(ZLIBINC "${EXTDIR}/zlib/")
set(CURLINC "${EXTDIR}/curl/include")
set(JPGINC "${EXTDIR}/jpg")
set(JPGTURBOINC "${EXTDIR}/libjpeg-turbo")
set(PNGINC "${EXTDIR}/png")
set(FREETYPEINC "${EXTDIR}/ft/include")
set(WESTEROSINC ${EXTDIR}/westeros/external/install/include)
set(WESTEROSSTUBINC ${EXTDIR}/westeros-stub)
set(JPEGTURBOINC ${EXTDIR}/libjpeg-turbo)
set(BREAKPADINC ${EXTDIR}/breakpad/src)
set(RTREMOTEINC ${PXCOREDIR}/remote)

set(PX_LIBRARY_SUPPORT 1)
set(PXWAYLAND_LIBRARY_SUPPORT 0)
set(PX_LIBRARY_LINK_PXCORE 1)

option(BUILD_WITH_GL "BUILD_WITH_GL" ON)
option(BUILD_WITH_WAYLAND "BUILD_WITH_WAYLAND" OFF)
option(BUILD_WITH_WESTEROS "BUILD_WITH_WESTEROS" OFF)
option(BUILD_WITH_CXX_11 "BUILD_WITH_CXX_11" ON)
option(BUILD_WITH_TEXTURE_USAGE_MONITORING "BUILD_WITH_TEXTURE_USAGE_MONITORING" OFF)
option(BUILD_WITH_WINDOWLESS_EGL "BUILD_WITH_WINDOWLESS_EGL" OFF)
option(BUILD_WITH_WINDOWLESS_DFB "BUILD_WITH_WINDOWLESS_DFB" OFF)
option(BUILD_WITH_SERVICE_MANAGER "BUILD_WITH_SERVICE_MANAGER" OFF)
option(BUILD_PXSCENE_APP "BUILD_PXSCENE_APP" ON)
option(BUILD_PXSCENE_SHARED_LIB "BUILD_PXSCENE_SHARED_LIB" ON)
option(BUILD_PXSCENE_STATIC_LIB "BUILD_PXSCENE_STATIC_LIB" ON)
option(BUILD_PXWAYLAND_SHARED_LIB "BUILD_PXWAYLAND_SHARED_LIB" OFF)
option(BUILD_PXWAYLAND_STATIC_LIB "BUILD_PXWAYLAND_STATIC_LIB" ON)
option(PXSCENE_COMPILE_WARNINGS_AS_ERRORS "PXSCENE_COMPILE_WARNINGS_AS_ERRORS" ON)

set(PXSCENE_DEFINITIONS )

if (APPLE)
    message("building pxscene for mac")
    set(PX_PLATFORM PX_PLATFORM_MAC)
    set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/mac)
    set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
    set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_NODE_V_6_9 _DARWIN_USE_64_BIT_INODE=1 NODE_ARCH="x64" NODE_WANT_INTERNALS=1 V8_DEPRECATION_WARNINGS= NODE_SHARED_MODE NODE_USE_V8_PLATFORM=1 NODE_HAVE_I18N_SUPPORT=1 NODE_HAVE_SMALL_ICU=1 HAVE_INSPECTOR=1 V8_INSPECTOR_USE_STL=1 V8_INSPECTOR_USE_OLD_STL=1 HAVE_OPENSSL=1 HAVE_DTRACE=1 __POSIX__ NODE_PLATFORM=darwin DUCONFIG_NO_TRANSLITERATION=1 UCONFIG_NO_SERVICE=1 UCONFIG_NO_REGULAR_EXPRESSIONS=1 U_ENABLE_DYLOAD=0 U_STATIC_IMPLEMENTATION=1 U_HAVE_STD_STRING=0 UCONFIG_NO_BREAK_ITERATION=0 UCONFIG_NO_LEGACY_CONVERSION=1 UCONFIG_NO_CONVERSION=1 HTTP_PARSER_STRICT=0 _LARGEFILE_SOURCE _FILE_OFFSET_BITS=64)
    set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_DEBUG_MODE PNG_APNG_SUPPORTED)
    set(PLATFORM_SOURCES mac/pxContextUtils.mm)
    set(PXSCENE_LINKER_OPTIONS "-framework OpenGL -framework Cocoa -framework Foundation")
    set(PXSCENE_LINK_LIBRARIES)
    set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/png/.libs)
    set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/jpg/.libs)
    set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/ft/objs/.libs)
    set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/curl/lib/.libs)
    set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/zlib)
    set(PLATFORM_LIBRARIES node pxCore rtCore_s pthread v8_libplatform png16 jpeg freetype curl z)
    include_directories(AFTER ${ZLIBINC} ${CURLINC} ${JPGINC} ${JPGTURBOINC} ${PNGINC} ${FREETYPEINC})
    if (DEFINED ENV{CODE_COVERAGE})
        message("enabling code coverage support")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
        set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_CODE_COVERAGE)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/8.0.0/lib/darwin)
        set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} clang_rt.profile_osx)
    endif ()
    add_custom_target(pxsceneDone ALL DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/pxscene)
    add_custom_command(TARGET pxsceneDone COMMENT "making app bundle" POST_BUILD COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/mkapp.sh WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    set(PX_LIBRARY_SUPPORT 0)
elseif (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    execute_process(COMMAND "hostname" OUTPUT_VARIABLE HOSTNAME)
    string(STRIP ${HOSTNAME} HOSTNAME)
    if (HOSTNAME STREQUAL "raspberrypi")
        message("building pxscene for raspberrypi")
        set(PX_PLATFORM PX_PLATFORM_GENERIC_EGL)
        set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/egl)
        set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
        set(PLATFORM_SOURCES egl/pxContextUtils.cpp)
        set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} PXSCENE_DISABLE_PXCONTEXT_EXT)
        set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_DEBUG_MODE PNG_APNG_SUPPORTED)
        include_directories(AFTER /opt/vc/include /opt/vc/include/interface/vcos/pthreads
                /opt/vc/include/interface/vmcs_host/linux /opt/vc/include)
        include_directories(AFTER ${ZLIBINC} ${CURLINC} ${JPGINC} ${JPGTURBOINC} ${PNGINC} ${FREETYPEINC})
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} /opt/vc/lib/)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/png/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/jpg/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/ft/objs/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/curl/lib/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/zlib)
        set(PLATFORM_LIBRARIES bcm_host EGL GLESv2 dl rt png16 node pxCore rtCore_s pthread v8_libplatform jpeg freetype curl z)
    elseif (BUILD_WITH_WINDOWLESS_EGL)
        message("building pxscene for windowless EGL")
        set(PX_PLATFORM PX_PLATFORM_GENERIC_EGL)
        set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/egl)
        set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
        set(PLATFORM_SOURCES egl/pxContextUtils.cpp)
        set(PLATFORM_LIBRARIES nexus nxclient)
        set(PXCORE_STAGING_LIST $ENV{PXCORE_STAGING})
        separate_arguments(PXCORE_STAGING_LIST)
        include_directories(AFTER ${PXCORE_STAGING_LIST})
        set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} PX_NO_WINDOW ENABLE_V8_HEAP_PARAMS ENABLE_MAX_TEXTURE_SIZE BSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE)
        set(PXSCENE_PLATFORM_DEFINE_LIST)
        if (DEFINED ENV{PXSCENE_PLATFORM_DEFINES})
            set(PXSCENE_PLATFORM_DEFINE_LIST $ENV{PXSCENE_PLATFORM_DEFINES})
            separate_arguments(PXSCENE_PLATFORM_DEFINE_LIST)
            set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ${PXSCENE_PLATFORM_DEFINE_LIST})
            message("Extra platform defines: " ${PXSCENE_PLATFORM_DEFINE_LIST})
        endif (DEFINED ENV{PXSCENE_PLATFORM_DEFINES})
        if (DEFINED ENV{PXSCENE_DISABLE_APNG_SUPPORT})
            message("Not including APNG support for pxscene")
        else ()
            message("Including APNG support for pxscene")
            set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} PNG_APNG_SUPPORTED)
        endif (DEFINED ENV{PXSCENE_DISABLE_APNG_SUPPORT})
        set(PXWAYLAND_LIBRARY_SUPPORT 1)
    elseif (BUILD_WITH_WINDOWLESS_DFB)
        message("building pxscene for windowless DFB")
        set(PX_PLATFORM PX_PLATFORM_GENERIC_DFB)
        set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/dfb)
        set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
        set(PLATFORM_LIBRARIES png15 directfb direct fusion)
        set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} PX_NO_WINDOW)
    else ()
        message("building pxscene for glut")
        set(PX_PLATFORM PX_PLATFORM_GLUT)
        set(PXCORE_LIB_LOCATION ${PXCOREDIR}/build/glut)
        set(PXSCENE_LINK_DIRECTORIES ${PXCORE_LIB_LOCATION})
        set(PLATFORM_SOURCES glut/pxContextUtils.cpp)
        set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_LIBJPEG_TURBO HAS_LINUX_BREAKPAD)
        set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_DEBUG_MODE PNG_APNG_SUPPORTED)
        include_directories(AFTER ${ZLIBINC} ${CURLINC} ${JPGINC} ${JPGTURBOINC} ${PNGINC} ${GLUTINC} ${FREETYPEINC})
        set(PLATFORM_LIBRARIES node pxCore rtCore_s pthread v8_libplatform png16 X11 glut GLEW GL dl rt turbojpeg breakpad_client jpeg freetype curl z)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/png/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/jpg/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/ft/objs/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/curl/lib/.libs)
        set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/zlib)
        set(PX_LIBRARY_LINK_PXCORE 0)
    endif (HOSTNAME STREQUAL "raspberrypi")
    set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/libjpeg-turbo/.libs)
    set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_NODE_V_6_9 NODE_PLATFORM="linux" NODE_WANT_INTERNALS=1 V8_DEPRECATION_WARNINGS=1 NODE_SHARED_MODE NODE_USE_V8_PLATFORM=1 NODE_HAVE_I18N_SUPPORT=1 NODE_HAVE_SMALL_ICU=1 HAVE_INSPECTOR=1 V8_INSPECTOR_USE_STL=1 V8_INSPECTOR_USE_OLD_STL=1)
    set(PXSCENE_LINKER_OPTIONS "")
    #set(PXSCENE_LINK_LIBRARIES pthread)
    if (DEFINED ENV{CODE_COVERAGE})
        message("enabling code coverage support")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
        set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_CODE_COVERAGE)
        set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} gcov)
    endif ()
else (APPLE)
    message(FATAL_ERROR "Cannot build pxscene.  Unknown platform")
endif (APPLE)

set(TARGETINCLUDE "")
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${NODEDIR}/out/Release/obj.target ${NODEDIR}/out/Release ${NODEDIR}/out/Release/obj.target/deps/v8/tools/gyp)
set(PXSCENE_LINK_DIRECTORIES ${PXSCENE_LINK_DIRECTORIES} ${EXTDIR}/breakpad/src/client/linux)

set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} ${PLATFORM_LIBRARIES})

set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} RT_PLATFORM_LINUX ${PX_PLATFORM} ENABLE_RT_NODE RUNINMAIN ENABLE_HTTP_CACHE)

#todo add code coverage check
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
#set(PXSCENE_LINKER_OPTIONS "${PXSCENE_LINKER_OPTIONS} -lgcov")


include_directories(AFTER ${NODEDIR}/src ${NODEDIR}/deps/uv/include ${NODEDIR}/deps/v8 ${NODEDIR}/deps/debugger-agent/include ${NODEDIR}/deps/v8/include ${NODEDIR}/deps/cares/include)
include_directories(AFTER ${WESTEROSINC} ${WESTEROSSTUBINC} ${JPEGTURBOINC} ${BREAKPADINC} ${RTREMOTEINC} ${PXCOREDIR}/src)
include_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR})

set(PXSCENE_COMMON_FILES pxScene2d.cpp pxResource.cpp pxConstants.cpp pxRectangle.cpp pxFont.cpp pxText.cpp
        pxTextBox.cpp pxImage.cpp pxImage9.cpp pxImageA.cpp pxArchive.cpp pxAnimate.cpp)

set(PXWAYLAND_LIB_FILES pxContextGL.cpp egl/pxContextUtils.cpp)

if (BUILD_WITH_GL)
    message("Building with GL support")
    set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} pxContextGL.cpp)
else ()
    message("Building with DirectFB support")
    set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} pxContextDFB.cpp)
endif (BUILD_WITH_GL)

if (BUILD_WITH_WAYLAND)
    message("Building with wayland support")
    set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} pxWayland.cpp pxWaylandContainer.cpp)
    set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_PX_WAYLAND_RPC)
    set(PXWAYLAND_LIB_FILES ${PXWAYLAND_LIB_FILES} pxWayland.cpp)
else ()
    message("Not building with wayland support")
    set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} DISABLE_WAYLAND)
endif (BUILD_WITH_WAYLAND)

if (BUILD_WITH_WESTEROS)
    message("Building with Westeros support")
    set(PXSCENE_LINK_LIBRARIES ${PXSCENE_LINK_LIBRARIES} westeros_compositor)
else ()
    message("Building with Westeros stubs")
    set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} ../external/westeros-stub/westeros-stub.cpp)
endif (BUILD_WITH_WESTEROS)

if (BUILD_WITH_SERVICE_MANAGER)
    message("Building with Service Manager support")
    set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} PX_SERVICE_MANAGER)
    set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} pxServiceManager.cpp)
endif (BUILD_WITH_SERVICE_MANAGER)

set(PXSCENE_COMMON_FILES ${PXSCENE_COMMON_FILES} ${PLATFORM_SOURCES})

set(PXSCENE_APP_FILES ${PXSCENE_COMMON_FILES} pxScene.cpp)
set(PXSCENE_LIB_FILES ${PXSCENE_COMMON_FILES})


set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fpermissive -g -Wall -Wno-attributes -Wall -Wextra")

if (PXSCENE_COMPILE_WARNINGS_AS_ERRORS)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
endif (PX_COMPILE_WARNINGS_AS_ERRORS)

if (BUILD_WITH_CXX_11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
endif (BUILD_WITH_CXX_11)

if (BUILD_WITH_TEXTURE_USAGE_MONITORING)
    set(PXSCENE_DEFINITIONS ${PXSCENE_DEFINITIONS} ENABLE_PX_SCENE_TEXTURE_USAGE_MONITORING)
endif (BUILD_WITH_TEXTURE_USAGE_MONITORING)

set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${PXSCENE_LINKER_OPTIONS})
link_directories(${PXSCENE_LINK_DIRECTORIES})
#link_libraries(${PXSCENE_LINK_LIBRARIES})

if (BUILD_PXSCENE_APP)
    message("Enabling build support for pxscene app")
    add_executable(pxscene_app ${PXSCENE_APP_FILES})
    set_target_properties(pxscene_app PROPERTIES OUTPUT_NAME "pxscene")
    target_link_libraries(pxscene_app ${PXSCENE_LINK_LIBRARIES})
    target_compile_definitions(pxscene_app PRIVATE ${PXSCENE_DEFINITIONS})
endif (BUILD_PXSCENE_APP)

if (PX_LIBRARY_SUPPORT GREATER 0)
    message("Enabling build support for libraries")
    if (PX_LIBRARY_LINK_PXCORE GREATER 0)
        set(LIBRARY_LINKER_OPTIONS -Wl,--whole-archive ${PXCORE_LIB_LOCATION}/libpxCore.a -Wl,--no-whole-archive)
    endif (PX_LIBRARY_LINK_PXCORE GREATER 0)

    if (BUILD_PXSCENE_STATIC_LIB)
        message("Enabling build support for pxscene static libraries")
        add_library(pxscene_static ${PXSCENE_LIB_FILES})
        set_target_properties(pxscene_static PROPERTIES OUTPUT_NAME "pxscene")
        target_link_libraries(pxscene_static ${LIBRARY_LINKER_OPTIONS} ${PXSCENE_LINK_LIBRARIES})
        target_compile_definitions(pxscene_static PRIVATE ${PXSCENE_DEFINITIONS})
    endif (BUILD_PXSCENE_STATIC_LIB)

    if (BUILD_PXSCENE_SHARED_LIB)
        message("Enabling build support for pxscene shared libraries")
        add_library(pxscene_shared SHARED ${PXSCENE_LIB_FILES})
        set_target_properties(pxscene_shared PROPERTIES OUTPUT_NAME "pxscene")
        target_link_libraries(pxscene_shared ${LIBRARY_LINKER_OPTIONS} ${PXSCENE_LINK_LIBRARIES})
        target_compile_definitions(pxscene_shared PRIVATE ${PXSCENE_DEFINITIONS})
    endif (BUILD_PXSCENE_SHARED_LIB)
    if (PXWAYLAND_LIBRARY_SUPPORT GREATER 0)
        message("Enabling build support for pxWayland libraries")
        if (BUILD_PXWAYLAND_STATIC_LIB)
            message("Enabling build support for pxWayland static libraries")
            add_library(pxwayland_static ${PXWAYLAND_LIB_FILES})
            set_target_properties(pxwayland_static PROPERTIES OUTPUT_NAME "pxwayland_s")
            target_compile_definitions(pxwayland_static PRIVATE RT_PLATFORM_LINUX PX_NO_WINDOW PX_PLATFORM_GENERIC_EGL ENABLE_PX_WAYLAND_RPC ENABLE_MAX_TEXTURE_SIZE RUNINMAIN ENABLE_HTTP_CACHE BSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE ${PXSCENE_PLATFORM_DEFINE_LIST} PXWAYLANDLIBPH)
        endif (BUILD_PXWAYLAND_STATIC_LIB)

        if (BUILD_PXWAYLAND_SHARED_LIB)
            message("Enabling build support for pxWayland shared libraries")
            add_library(pxwayland_shared SHARED ${PXWAYLAND_LIB_FILES})
            set_target_properties(pxwayland_shared PROPERTIES OUTPUT_NAME "pxwayland")
            target_link_libraries(pxwayland_shared ${LIBRARY_LINKER_OPTIONS} ${PXSCENE_LINK_LIBRARIES})
            target_compile_definitions(pxwayland_shared PRIVATE RT_PLATFORM_LINUX PX_NO_WINDOW PX_PLATFORM_GENERIC_EGL ENABLE_PX_WAYLAND_RPC ENABLE_MAX_TEXTURE_SIZE RUNINMAIN ENABLE_HTTP_CACHE BSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE ${PXSCENE_PLATFORM_DEFINE_LIST} PXWAYLANDLIBPH)
        endif (BUILD_PXWAYLAND_SHARED_LIB)
    endif (PXWAYLAND_LIBRARY_SUPPORT GREATER 0)
else ()
    message("Disabling build support for libraries")
endif (PX_LIBRARY_SUPPORT GREATER 0)

