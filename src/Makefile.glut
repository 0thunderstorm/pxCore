EXTDIR=../examples/pxScene2d/external
NODEPATH=$(EXTDIR)/libnode-v6.9.0/
NODEINC=\
        -I$(NODEPATH)/src \
        -I$(NODEPATH)/deps/uv/include \
        -I$(NODEPATH)/deps/v8 \
        -I$(NODEPATH)/deps/debugger-agent/include \
        -I$(NODEPATH)/deps/v8/include \
        -I$(NODEPATH)/deps/cares/include 
ZLIBINC=-I$(EXTDIR)/zlib/
CURLINC=-I$(EXTDIR)/curl/include
INCLUDE_PATHS=$(NODEINC) $(ZLIBINC) $(CURLINC) -I.
EXTRA_DEFINES=-DENABLE_NODE_V_6_9 -DNODE_PLATFORM="linux" -DNODE_WANT_INTERNALS=1 -DV8_DEPRECATION_WARNINGS=1 -DNODE_SHARED_MODE -DNODE_USE_V8_PLATFORM=1 -DNODE_HAVE_I18N_SUPPORT=1 -DNODE_HAVE_SMALL_ICU=1 -DHAVE_INSPECTOR=1 -DV8_INSPECTOR_USE_STL=1 -DV8_INSPECTOR_USE_OLD_STL=1
CFLAGS= -DPX_PLATFORM_GLUT -DRT_PLATFORM_LINUX -DENABLE_RT_NODE -DENABLE_HTTP_CACHE -DRUNINMAIN -fPIC -Wno-deprecated $(INCLUDE_PATHS) $(EXTRA_DEFINES) -std=c++11 -fpermissive
OUTDIR=../build/glut


all: $(OUTDIR)/libpxCore.a 

clean:
	rm $(OUTDIR)/*
	rm *.o

$(OUTDIR)/libpxCore.a: pxOffscreen.o pxWindowUtil.o pxBufferNative.o pxOffscreenNative.o pxEventLoopNative.o pxWindowNativeGlut.o pxTimerNative.o pxViewWindow.o pxClipboardNative.o jsCallback.o rtFunctionWrapper.o rtObjectWrapper.o rtWrapperUtils.o rtError.o rtFile.o rtLibrary.o rtLog.o rtNode.o rtObject.o rtPathUtils.o rtString.o rtTest.o rtThreadPool.o rtThreadQueue.o rtThreadTask.o rtMutexNative.o rtThreadPoolNative.o rtUrlUtils.o rtValue.o rtZip.o utf8.o ioapi_mem.o unzip.o ioapi.o 
		 mkdir -p $(OUTDIR)  
		 ar rc $(OUTDIR)/libpxCore.a pxOffscreen.o pxWindowUtil.o pxBufferNative.o pxOffscreenNative.o pxEventLoopNative.o pxWindowNativeGlut.o pxTimerNative.o pxViewWindow.o pxClipboardNative.o jsCallback.o rtFunctionWrapper.o rtObjectWrapper.o rtWrapperUtils.o rtError.o rtFile.o rtLibrary.o rtLog.o rtNode.o rtObject.o rtPathUtils.o rtString.o rtTest.o rtThreadPool.o rtThreadQueue.o rtThreadTask.o rtMutexNative.o rtThreadPoolNative.o rtUrlUtils.o rtValue.o rtZip.o utf8.o ioapi_mem.o unzip.o ioapi.o

pxViewWindow.o: pxViewWindow.cpp
	$(CXX) -o pxViewWindow.o -Wall $(CFLAGS) -c pxViewWindow.cpp
          
pxOffscreen.o: pxOffscreen.cpp
	$(CXX) -o pxOffscreen.o -Wall $(CFLAGS) -c pxOffscreen.cpp

pxBufferNative.o: glut/pxBufferNative.cpp
	$(CXX) -o pxBufferNative.o -Wall $(CFLAGS) -c glut/pxBufferNative.cpp

pxOffscreenNative.o: glut/pxOffscreenNative.cpp
	$(CXX) -o pxOffscreenNative.o -Wall $(CFLAGS) -c glut/pxOffscreenNative.cpp

pxWindowNativeGlut.o: glut/pxWindowNative.cpp
	$(CXX) -o pxWindowNativeGlut.o -Wall $(CFLAGS) -c glut/pxWindowNative.cpp

pxEventLoopNative.o: glut/pxEventLoopNative.cpp
	$(CXX) -o pxEventLoopNative.o -Wall $(CFLAGS) -c glut/pxEventLoopNative.cpp

pxTimerNative.o: glut/pxTimerNative.cpp
	$(CXX) -o pxTimerNative.o -Wall $(CFLAGS) -c glut/pxTimerNative.cpp

pxClipboardNative.o: glut/pxClipboardNative.cpp
	$(CXX) -o pxClipboardNative.o -Wall $(CFLAGS) -c glut/pxClipboardNative.cpp

pxWindowUtil.o: pxWindowUtil.cpp
	$(CXX) -o pxWindowUtil.o -Wall $(CFLAGS) -c pxWindowUtil.cpp

jsCallback.o: jsbindings/jsCallback.cpp
	$(CXX) -o jsCallback.o -Wall $(CFLAGS) -c jsbindings/jsCallback.cpp
rtFunctionWrapper.o: jsbindings/rtFunctionWrapper.cpp
	$(CXX) -o rtFunctionWrapper.o -Wall $(CFLAGS) -c jsbindings/rtFunctionWrapper.cpp
rtObjectWrapper.o: jsbindings/rtObjectWrapper.cpp
	$(CXX) -o rtObjectWrapper.o -Wall $(CFLAGS) -c jsbindings/rtObjectWrapper.cpp
#rtWrapperInit.o: jsbindings/rtWrapperInit.cpp
#	$(CXX) -o rtWrapperInit.o -Wall $(CFLAGS) -c jsbindings/rtWrapperInit.cpp
rtWrapperUtils.o: jsbindings/rtWrapperUtils.cpp
	$(CXX) -o rtWrapperUtils.o -Wall $(CFLAGS) -c jsbindings/rtWrapperUtils.cpp
rtError.o: rtError.cpp
	$(CXX) -o rtError.o -Wall $(CFLAGS) -c rtError.cpp
rtFile.o: rtFile.cpp
	$(CXX) -o rtFile.o -Wall $(CFLAGS) -c rtFile.cpp
rtLibrary.o: rtLibrary.cpp
	$(CXX) -o rtLibrary.o -Wall $(CFLAGS) -c rtLibrary.cpp
rtLog.o: rtLog.cpp
	$(CXX) -o rtLog.o -Wall $(CFLAGS) -c rtLog.cpp
rtNode.o: rtNode.cpp
	$(CXX) -o rtNode.o -Wall $(CFLAGS) -c rtNode.cpp
rtObject.o: rtObject.cpp
	$(CXX) -o rtObject.o -Wall $(CFLAGS) -c rtObject.cpp
rtPathUtils.o: rtPathUtils.cpp
	$(CXX) -o rtPathUtils.o -Wall $(CFLAGS) -c rtPathUtils.cpp
rtString.o: rtString.cpp
	$(CXX) -o rtString.o -Wall $(CFLAGS) -c rtString.cpp
rtTest.o: rtTest.cpp
	$(CXX) -o rtTest.o -Wall $(CFLAGS) -c rtTest.cpp
rtThreadPool.o: rtThreadPool.cpp
	$(CXX) -o rtThreadPool.o -Wall $(CFLAGS) -c rtThreadPool.cpp
rtThreadQueue.o: rtThreadQueue.cpp
	$(CXX) -o rtThreadQueue.o -Wall $(CFLAGS) -c rtThreadQueue.cpp
rtThreadTask.o: rtThreadTask.cpp
	$(CXX) -o rtThreadTask.o -Wall $(CFLAGS) -c rtThreadTask.cpp
rtMutexNative.o: unix/rtMutexNative.cpp
	$(CXX) -o rtMutexNative.o -Wall $(CFLAGS) -c unix/rtMutexNative.cpp
rtThreadPoolNative.o: unix/rtThreadPoolNative.cpp
	$(CXX) -o rtThreadPoolNative.o -Wall $(CFLAGS) -c unix/rtThreadPoolNative.cpp
rtUrlUtils.o: rtUrlUtils.cpp
	$(CXX) -o rtUrlUtils.o -Wall $(CFLAGS) -c rtUrlUtils.cpp
rtValue.o: rtValue.cpp
	$(CXX) -o rtValue.o -Wall $(CFLAGS) -c rtValue.cpp
rtZip.o: rtZip.cpp
	$(CXX) -o rtZip.o -Wall $(CFLAGS) -c rtZip.cpp
utf8.o: utf8.c
	$(CC) -o utf8.o -Wall $(CFLAGS) -c utf8.c
unzip.o: unzip.c
	$(CC) -o unzip.o -Wall $(CFLAGS) -c unzip.c
ioapi_mem.o: ioapi_mem.c
	$(CC) -o ioapi_mem.o -Wall $(CFLAGS) -c ioapi_mem.c
ioapi.o: ioapi.c
	$(CC) -o ioapi.o -Wall $(CFLAGS) -c ioapi.c
